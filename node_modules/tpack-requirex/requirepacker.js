/**
 * @fileOverview 支持打包 ES6、AMD、CMD、CommonJS、BootJs为一个文件。
 */

/**
 * 表示一个模块打包器。
 * @param {} configs 
 * @returns {} 
 */
function RequirePacker(configs) {
    this.included = [];
    this.excluded = [];
    this.modules = {};
}

RequirePacker.prototype.pack = function (path) {
    var modules = this.getResult(path);

    console.log(modules)

    var result = 'function define(){}';

    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];


        var content = module.content;
        var name = module.name;

        result += 'define()';

        result += content;

        result += '';

    }

    result += '';

    return result;
};

/**
 * 获取最新的打包结果。
 * @returns {Object} 返回包含实际打包文件的键值对。 
 */
RequirePacker.prototype.getResult = function (path) {
    if (path) {
        this.include(path);
    }

    var result = [];
    for (var i = 0; i < this.included.length; i++) {
        var p = this.included[i];
        if (this.excluded.indexOf(p) < 0) {
            result.push(this.modules[p]);
        }
    }
    return result;
};

/**
 * 添加一个要包含的模块。
 * @param {String} path 要解析的模块绝对路径。
 */
RequirePacker.prototype.include = function (path, parentModule) {

    // 不重复解析。
    if (path in this.modules) {
        return;
    }

    // 加载依赖项。
    var module = this.modules[path] = this.parseModule(path);

    // 添加依赖项。
    for (var i = 0; i < module.included.length; i++) {
        this.include(module.included[i], module);
    }

    // 添加排除项。
    for (var i = 0; i < module.excluded.length; i++) {
        this.exclude(module.excluded[i], module);
    }

    // 保存文件位置。
    this.included.push(path);

};

/**
 * 删除一个已包含的模块。
 * @param {String} path 要解析的模块绝对路径。
 */
RequirePacker.prototype.exclude = function (path, parentModule) {

    // 获取被排除的模块。
    var module = this.modules[path] || (this.modules[path] = this.parseModule(path));

    // 不重复排除。
    if (module.excluded) {
        return;
    }
    module.excluded = true;

    // 排除一个模块同时也排除其依赖项。
    for (var i = 0; i < module.included.length; i++) {
        this.exclude(module.included[i], module);
    }

    this.excluded.push(path);
};

/**
 * 解析一个模块，返回模块内的直接依赖路径。
 * @param {String} path 要解析的模块绝对路径。
 * @returns {Object} 返回包含 included, excluded, content 的对象。
 */
RequirePacker.prototype.parseModule = function (path) {
    var result = {
        path: path,
        name: this.getName(path),
        content: this.readFile(path),
        included: [],
        excluded: []
    };

    this.parseRequire(result);

    for (var i = 0; i < result.included.length; i++) {;
        result.included[i] = this.resolvePath(path, result.included[i])
    }

    for (var i = 0; i < result.excluded.length; i++) {;
        result.excluded[i] = this.resolvePath(path, result.excluded[i])
    }

    return result;
};

/**
 * 解析一个模块的依赖项。
 * @param {} result 
 * @returns {} 
 */
RequirePacker.prototype.parseRequire = function (result) {

    var me = this;

    // 搜索 AMD define(..., [...], function(){ ... })
    result.content.replace(/\bdefine\s*\(([\s\S]*?)\,\s*function\b/g, function (_, content) {
        result.amd = true;

        // content: "name", ["module1, "module2"]
        try {
            content = eval("[" + content + "]");
        } catch (e) {
            content = ['', []];
        }
        if (content.length > 1) {
            result.name = content[0];
        }
        result.included.push.apply(result.included, content[content.length - 1]);
    });

    // 搜索 CMD require(...)
    result.content.replace(/\brequire\s*\((.*?)\)/g, function (_, content) {
        result.cmd = true;

        // content: "../a.js"
        try {
            content = eval(content);
        } catch (e) {
            content = "";
        }
        content && result.included.push(content);
    });

    // 搜索 /* #include */
    result.content.replace(/\/[\/\*]\s*#(in|ex)clude\s+(.*)/g, function (_, includeOrExclude, content) {
        result.bmd = true;

        // content: "../a.js"
        content = content.replace(/\s*(\*\/)?$/, "");
        content && ( includeOrExclude == "in" ? result.included.push(content) : result.excluded.push(content));
    });

};

/**
 * 获取一个路径的名字。
 * @param {String} path 要解析的模块绝对路径。
 */
RequirePacker.prototype.getName = function (path) {
    var Path = require('path');
    return Path.basename(path);
};

/**
 * 解析一个路径的绝对路径。
 * @param {String} path 要解析的模块绝对路径。
 */
RequirePacker.prototype.resolvePath = function (basePath, modulePath) {
    var Path = require('path');
    return Path.resolve(Path.dirname(basePath), modulePath || "");
};

/**
 * 载入文件内容底层。
 * @param {String} path 要加载的文件路径。
 * @returns {String} 返回文件内容。 
 */
RequirePacker.prototype.readFile = function (path) {
    return require('tealweb-io').readFile(path);
};

module.exports = RequirePacker;